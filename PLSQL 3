ANSWER: 1

DECLARE
    v_count NUMBER;
BEGIN
    UPDATE employees
    SET salary = salary * 1.10
    WHERE department_id = &department_number;
    
    v_count := SQL%ROWCOUNT;
    
    DBMS_OUTPUT.PUT_LINE('Number of records updated: ' || v_count);
END;

Note: In this block, &department_number is a user-defined parameter, 
and employees is the name of the table that holds the employee data. Replace it with the actual name of your table.

ANSWER: 2

A)using a simple FOR loop with EXIT WHEN condition:
DECLARE
    v_count NUMBER := 0;
BEGIN
    FOR i IN (SELECT last_name, salary
              FROM employees
              ORDER BY employee_id)
    LOOP
        v_count := v_count + 1;
        DBMS_OUTPUT.PUT_LINE('Employee Name: ' || i.last_name || ', Salary: ' || i.salary || ', Grade: ' ||
                             (SELECT grade
                              FROM sal_grades
                              WHERE i.salary BETWEEN low_salary AND high_salary));
        
        EXIT WHEN v_count = 5;
    END LOOP;
END;

B) using a WHILE loop:
DECLARE
    v_count NUMBER := 0;
    CURSOR c_employees IS
        SELECT last_name, salary
        FROM employees
        ORDER BY employee_id;
BEGIN
    OPEN c_employees;
    LOOP
        FETCH c_employees INTO last_name, salary;
        EXIT WHEN c_employees%NOTFOUND;
        
        v_count := v_count + 1;
        DBMS_OUTPUT.PUT_LINE('Employee Name: ' || last_name || ', Salary: ' || salary || ', Grade: ' ||
                             (SELECT grade
                              FROM sal_grades
                              WHERE salary BETWEEN low_salary AND high_salary));
        
        EXIT WHEN v_count = 5;
    END LOOP;
    CLOSE c_employees;
END;

C) using a Cursor FOR LOOP:
DECLARE
    v_count NUMBER := 0;
    CURSOR c_employees IS
        SELECT last_name, salary
        FROM employees
        ORDER BY employee_id;
BEGIN
    FOR i IN c_employees
    LOOP
        v_count := v_count + 1;
        DBMS_OUTPUT.PUT_LINE('Employee Name: ' || i.last_name || ', Salary: ' || i.salary || ', Grade: ' ||
                             (SELECT grade
                              FROM sal_grades
                              WHERE i.salary BETWEEN low_salary AND high_salary));
        
        EXIT WHEN v_count = 5;
    END LOOP;
END;

Note: In these blocks, employees and sal_grades are the names of the tables that hold the employee and salary grade data, respectively. 
Replace them with the actual names of your tables.

ANSWER: 3

DECLARE
    CURSOR c_clerks IS
        SELECT last_name, salary
        FROM employees
        WHERE job_id = 'CLERK'
        ORDER BY last_name;
BEGIN
    DBMS_OUTPUT.PUT_LINE('CLERK Employees:');
    FOR i IN c_clerks
    LOOP
        DBMS_OUTPUT.PUT_LINE('Name: ' || i.last_name || ', Salary: ' || i.salary);
    END LOOP;
END;

Note: In this block, employees is the name of the table that holds the employee data. Replace it with the actual name of your table.

ANSWER:4
DECLARE
    v_job employees.job_id%TYPE := UPPER(:job);
    CURSOR c_employees (p_job IN employees.job_id%TYPE) IS
        SELECT last_name, department_id, salary
        FROM employees
        WHERE job_id = p_job
        ORDER BY last_name;
BEGIN
    DBMS_OUTPUT.PUT_LINE('Employees with job: ' || v_job);
    FOR i IN c_employees (v_job)
    LOOP
        DBMS_OUTPUT.PUT_LINE('Name: ' || i.last_name || ', Department: ' || i.department_id || ', Salary: ' || i.salary);
    END LOOP;
END;

Note: In this block, employees is the name of the table that holds the employee data. Replace it with the actual name of your table. 
':job' is the input parameter passed to the PL/SQL block. 
Replace it with the actual name of the input parameter.

ANSWER: 5
DECLARE
    CURSOR c_employees IS
        SELECT *
        FROM employees
        FOR UPDATE OF salary;
    v_new_salary employees.salary%TYPE;
BEGIN
    FOR i IN c_employees
    LOOP
        IF i.job_id = 'CLERK' AND i.department_id = 10 THEN
            v_new_salary := i.salary * 1.20;
        ELSIF i.job_id = 'MANAGER' AND i.department_id = 20 THEN
            v_new_salary := i.salary * 1.05;
        ELSE
            v_new_salary := i.salary * 1.10;
        END IF;
        UPDATE employees
        SET salary = v_new_salary
        WHERE CURRENT OF c_employees;
    END LOOP;
    COMMIT;
END;

Note: In this block, employees is the name of the table that holds the employee data. Replace it with the actual name of your table.

ANSWER: 6

DECLARE
    CURSOR c_depts IS
        SELECT deptno, dname
        FROM dept;
    CURSOR c_employees (p_deptno IN NUMBER) IS
        SELECT empno, ename, salary, job
        FROM emp
        WHERE deptno = p_deptno
        ORDER BY empno;
BEGIN
    FOR i IN c_depts
    LOOP
        DBMS_OUTPUT.PUT_LINE('Department Number: ' || i.deptno || ', Department Name: ' || i.dname);
        DBMS_OUTPUT.PUT_LINE('EMPLOYEE NUMBER  EMPLOYEE NAME  SALARY  JOB_ID');
        FOR j IN c_employees (i.deptno)
        LOOP
            DBMS_OUTPUT.PUT_LINE(j.empno || ' ' || j.ename || ' ' || j.salary || ' ' || j.job);
        END LOOP;
        DBMS_OUTPUT.PUT_LINE('___________________________________________________');
    END LOOP;
END;

And here is the same PL/SQL block using parameterized cursors:
DECLARE
    CURSOR c_depts IS
        SELECT deptno, dname
        FROM dept;
    CURSOR c_employees (p_deptno IN NUMBER) IS
        SELECT empno, ename, salary, job
        FROM emp
        WHERE deptno = p_deptno
        ORDER BY empno;
BEGIN
    FOR i IN c_depts
    LOOP
        DBMS_OUTPUT.PUT_LINE('Department Number: ' || i.deptno || ', Department Name: ' || i.dname);
        DBMS_OUTPUT.PUT_LINE('EMPLOYEE NUMBER  EMPLOYEE NAME  SALARY  JOB_ID');
        FOR j IN c_employees (i.deptno)
        LOOP
            DBMS_OUTPUT.PUT_LINE(j.empno || ' ' || j.ename || ' ' || j.salary || ' ' || j.job);
        END LOOP;
        DBMS_OUTPUT.PUT_LINE('___________________________________________________');
    END LOOP;
END;

Note: In these blocks, dept and emp are the names of the tables that hold the department and employee data, respectively. 
Replace them with the actual names of your tables.
