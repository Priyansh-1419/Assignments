public class Customer {
    private int customerId;
    private String customerName;
    private double monthlyIncome;
    private String profession;
    private String designation;
    private String companyName;

    public Customer() {}

    public void setCustomerId(int customerId) {
        this.customerId = customerId;
    }

    public void setCustomerName(String customerName) {
        this.customerName = customerName;
    }

    public void setMonthlyIncome(double monthlyIncome) {
        this.monthlyIncome = monthlyIncome;
    }

    public void setProfession(String profession) {
        this.profession = profession;
    }

    public void setDesignation(String designation) {
        this.designation = designation;
    }

    public void setCompanyName(String companyName) {
        this.companyName = companyName;
    }

    @Override
    public String toString() {
        return "Customer [customerId=" + customerId + ", customerName=" + customerName + ", monthlyIncome="
                + monthlyIncome + ", profession=" + profession + ", designation=" + designation + ", companyName="
                + companyName + "]";
    }
}


<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans.xsd">
 
    <!-- Define Customer bean -->
    <bean id="customer" class="com.example.Customer">
        <!-- Dependency injection via setter methods -->
        <property name="customerId" value="1" />
        <property name="customerName" value="John Doe" />
        <property name="monthlyIncome" value="5000.0" />
        <property name="profession" value="Software Engineer" />
        <property name="designation" value="Senior Developer" />
        <property name="companyName" value="ABC Company" />
    </bean>
    
</beans>



import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class Main {
    public static void main(String[] args) {
        // Load Spring Container
        ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");
        
        // Get Customer bean from Spring Container
        Customer customer = (Customer) context.getBean("customer");
        
        // Print Customer details
        System.out.println(customer);
    }
}



<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- Bean definition for Customer -->
    <bean id="customerBean" class="Customer">
        <!-- Constructor injection using index -->
        <constructor-arg index="0" value="123"/>
        <constructor-arg index="1" value="John Doe"/>
        <constructor-arg index="2" value="5000.0"/>
        <constructor-arg index="3" value="Engineer"/>
        <constructor-arg index="4" value="Manager"/>
        <constructor-arg index="5" value="Acme Corporation"/>
    </bean>

</beans>






import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class Main {
    public static void main(String[] args) {
        // Load the Spring configuration file
        ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");

        // Retrieve the Customer bean from the Spring container
        Customer customer = (Customer) context.getBean("customerBean");

        // Use the Customer object
        System.out.println(customer.getCustomerName() + " works as a " + customer.getProfession() + " at " + customer.getCompanyName());
    }
}






@Component
@Scope("singleton")
public class SingletonDemo {

   private int count = 0;
   
   public int getCount() {
      return ++count;
   }
}

@Component
@Scope("prototype")
public class PrototypeDemo {

   private int count = 0;
   
   public int getCount() {
      return ++count;
   }
}



@Component
public class TestBean {

   @Autowired
   private SingletonDemo singletonDemo;
   
   @Autowired
   private PrototypeDemo prototypeDemo;
   
   public void test() {
      // Increment count on SingletonDemo bean
      System.out.println(singletonDemo.getCount()); // Output: 1
      System.out.println(singletonDemo.getCount()); // Output: 2
      
      // Increment count on PrototypeDemo bean
      System.out.println(prototypeDemo.getCount()); // Output: 1
      System.out.println(prototypeDemo.getCount()); // Output: 1
   }
}


When we run the test() method, we can see that the count field of the SingletonDemo bean gets incremented every time the getCount() method is called, whereas the count field of the PrototypeDemo bean gets reset to zero every time a new instance is created.

This is the difference between the singleton and prototype scopes. In the singleton scope, the same instance is shared across all classes that require it, whereas in the prototype scope, a new instance is created every time it is requested.





public class MySingletonBean {
   private int count = 0;
   
   public int getCount() {
      return ++count;
   }
}

public class MyPrototypeBean {
   private int count = 0;
   
   public int getCount() {
      return ++count;
   }
}


<bean id="myPrototypeBean" class="com.example.MyPrototypeBean" scope="prototype">
   <!-- Bean properties -->
</bean>



<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd">
   
   <bean id="mySingletonBean" class="com.example.MySingletonBean" scope="singleton"/>
   
   <bean id="myPrototypeBean" class="com.example.MyPrototypeBean" scope="prototype"/>
   
</beans>





public class TestBean {

   public static void main(String[] args) {
      ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");
      
      // Get singleton bean
      MySingletonBean singletonBean1 = (MySingletonBean) context.getBean("mySingletonBean");
      MySingletonBean singletonBean2 = (MySingletonBean) context.getBean("mySingletonBean");
      
      // Increment count on singleton bean
      System.out.println(singletonBean1.getCount()); // Output: 1
      System.out.println(singletonBean2.getCount()); // Output: 2
      
      // Get prototype bean
      MyPrototypeBean prototypeBean1 = (MyPrototypeBean) context.getBean("myPrototypeBean");
      MyPrototypeBean prototypeBean2 = (MyPrototypeBean) context.getBean("myPrototypeBean");
      
      // Increment count on prototype bean
      System.out.println(prototypeBean1.getCount()); // Output: 1
      System.out.println(prototypeBean2.getCount()); // Output: 1
   }
}




public class Customer {
    private int id;
    private String name;
    private String address;
    private List<String> phoneNumbers;
    private Set<String> emailAdressSet;

    public Customer(int id, String name, String address, List<String> phoneNumbers) {
        this.id = id;
        this.name = name;
        this.address = address;
        this.phoneNumbers = phoneNumbers;
    }

    public void setEmailAdressSet(Set<String> emailAdressSet) {
        this.emailAdressSet = emailAdressSet;
    }

    // getters and setters
    // ...

    @Override
    public String toString() {
        return "Customer [id=" + id + ", name=" + name + ", address=" + address
                + ", phoneNumbers=" + phoneNumbers + ", emailAdressSet=" + emailAdressSet + "]";
    }
}




<bean id="customer" class="com.example.Customer">
    <constructor-arg name="id" value="123" />
    <constructor-arg name="name" value="John Doe" />
    <constructor-arg name="address" value="123 Main St" />
    <constructor-arg name="phoneNumbers">
        <list>
            <value>555-1234</value>
            <value>555-5678</value>
        </list>
    </constructor-arg>
    <property name="emailAdressSet">
        <set>
            <value>john.doe@example.com</value>
            <value>johndoe@gmail.com</value>
        </set>
    </property>
</bean>





