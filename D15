public class MyThread extends Thread {
    @Override
    public void run() {
        // Code to be executed in this thread
        System.out.println("Thread using Thread class is running");
    }
}

public class Main {
    public static void main(String[] args) {
        MyThread myThread = new MyThread();
        myThread.start();
    }
}





public class MyRunnable implements Runnable {
    @Override
    public void run() {
        // Code to be executed in this thread
        System.out.println("Thread using Runnable interface is running");
    }
}

public class Main {
    public static void main(String[] args) {
        MyRunnable myRunnable = new MyRunnable();
        Thread thread = new Thread(myRunnable);
        thread.start();
    }
}




2

public class HelloThread extends Thread {
    @Override
    public void run() {
        while (true) {
            System.out.println("Hello world");
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}

public class ByeThread implements Runnable {
    @Override
    public void run() {
        while (true) {
            System.out.println("Bye");
            try {
                Thread.sleep(2000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}

public class Main {
    public static void main(String[] args) {
        HelloThread helloThread = new HelloThread();
        ByeThread byeThread = new ByeThread();

        helloThread.start();
        Thread t = new Thread(byeThread);
        t.start();
    }
}


3

public class MyThread extends Thread {
    @Override
    public void run() {
        for (int i = 1; i <= 10; i++) {
            System.out.print(Thread.currentThread().getName() + "-" + i + " ");
        }
        System.out.println();
    }
}

public class Main {
    public static void main(String[] args) {
        for (int i = 1; i <= 5; i++) {
            MyThread thread = new MyThread();
            thread.start();
        }
    }
}


4

public class MyThread extends Thread {
    @Override
    public void run() {
        for (int i = 1; i <= 10; i++) {
            System.out.print(Thread.currentThread().getName() + "-" + i + " ");
        }
        System.out.println();
    }
}

public class Main {
    public static void main(String[] args) {
        MyThread thread1 = new MyThread();
        thread1.setPriority(Thread.MAX_PRIORITY);
        thread1.start();

        for (int i = 2; i <= 5; i++) {
            MyThread thread = new MyThread();
            thread.start();
        }
    }
}


5
public class MyThread extends Thread {
    private String message;
    private int count;

    public MyThread(String message, int count) {
        this.message = message;
        this.count = count;
    }

    @Override
    public void run() {
        for (int i = 0; i < count; i++) {
            synchronized (this) {
                System.out.print(message + " ");
                this.notify();
                try {
                    if (i < count - 1) {
                        this.wait();
                    }
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}

public class Main {
    public static void main(String[] args) {
        MyThread thread1 = new MyThread("hello", 10);
        MyThread thread2 = new MyThread("bye", 10);

        thread1.start();
        thread2.start();
    }
}



6
public class MyThread extends Thread {
    private int threadNumber;

    public MyThread(int threadNumber) {
        this.threadNumber = threadNumber;
    }

    @Override
    public void run() {
        try {
            if (threadNumber > 1) {
                Thread previousThread = Thread.currentThread();
                previousThread.join();
            }

            System.out.println("Thread " + threadNumber + " started");

            // Do some work here...

            System.out.println("Thread " + threadNumber + " completed");
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}

public class Main {
    public static void main(String[] args) {
        int numThreads = 5;

        MyThread[] threads = new MyThread[numThreads];

        for (int i = 0; i < numThreads; i++) {
            threads[i] = new MyThread(i + 1);
            threads[i].start();
        }
    }
}


7


