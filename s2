
1. Create a form that accepts a name, password and pass it on to the servlet
a. The receiving servlet should check the name and password against a hard coded 
list of name-password pairs stored in a HashMap. 
b. HashMap should be initialized with some dummy usernames and passwords in 
the constructor/init method of the servlet.
c. Servlet should return either 'Name/Password Match' or 'Name/Password Does 
Not Match' back to client.
2. In the above Question, use forward and redirect. If the username and password is 
correct, set a request attribute named “message” and the value for the same is 
“'Name/Password Match”. Forward the request using RequestDispatcher forward() 
method to another servlet and print all three values there – Username and password 
entered by user and the ‘message’ attribute. 
If the password is incorrect, redirect the request to an error page using 
ServletResponse.sendRedirect()
3. In the above question, replace sendRedirect() method with sendError() method. 
4. Write a servlet that redirects requests form one host to another host, giving an 
explanation to the client before the redirection. As we generally see during payment 
and request will be redirected to bank website.
5. Create a servlet that displays the servlet config and servlet context parameters. For this 
purpose, you can create more than one servlet.
6. Map error-code ‘404’ with an underconstruction.html page. Whenever 404 error occurs, 
instead of showing the default error page, it shows ‘underconstruction.html’ page.
7. Map java.lang.Exception with an ErrorServlet. 
8. Create a Customer Registration Form with the below mentioned fields:
Name Data Type Screen Object
Customer Name String Text field
Date of Birth LocalDate Date
Email Address String Text field
Contact Number String Text field
Monthly Salary Double Text field
Gender Char Radio Button
Hobbies String array Check box
Location String Drop-down
Generate customer id and password and return the same to the customer post 
successful registration. 











1. Create a form that accepts a name, password and pass it on to the servlet
a. The receiving servlet should check the name and password against a hard coded 
list of name-password pairs stored in a HashMap. 
b. HashMap should be initialized with some dummy usernames and passwords in 
the constructor/init method of the servlet.
c. Servlet should return either 'Name/Password Match' or 'Name/Password Does 
Not Match' back to client.

Here is a sample HTML form that accepts a username and password and submits it to a servlet named LoginServlet:

php
Copy code
<html>
  <body>
    <form action="LoginServlet" method="post">
      <label for="username">Username:</label>
      <input type="text" id="username" name="username"><br><br>
      <label for="password">Password:</label>
      <input type="password" id="password" name="password"><br><br>
      <input type="submit" value="Submit">
    </form>
  </body>
</html>
The form has two input fields for username and password, respectively, and a submit button. When the user clicks the submit button, the form data is sent as an HTTP POST request to the LoginServlet.

Here is a sample LoginServlet that checks the username and password against a hard-coded list of username-password pairs stored in a HashMap:

java
Copy code
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import java.util.*;

public class LoginServlet extends HttpServlet {
    
    private Map<String, String> userCredentials;
    
    public void init() {
        // Initialize the userCredentials HashMap with some dummy usernames and passwords
        userCredentials = new HashMap<String, String>();
        userCredentials.put("alice", "password123");
        userCredentials.put("bob", "letmein");
        userCredentials.put("charlie", "pa$$w0rd");
    }

    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // Retrieve the username and password submitted from the form
        String username = request.getParameter("username");
        String password = request.getParameter("password");

        // Check if the submitted username and password match any entries in the userCredentials HashMap
        if (userCredentials.containsKey(username) && userCredentials.get(username).equals(password)) {
            // If the username and password match, send a response indicating success
            response.setContentType("text/html");
            PrintWriter out = response.getWriter();
            out.println("<html><body><h2>Name/Password Match</h2></body></html>");
        } else {
            // If the username and password do not match, send a response indicating failure
            response.setContentType("text/html");
            PrintWriter out = response.getWriter();
            out.println("<html><body><h2>Name/Password Does Not Match</h2></body></html>");
        }
    }
}
The init() method initializes the userCredentials HashMap with some dummy username-password pairs. The doPost() method retrieves the submitted username and password from the request and checks if they match any entries in the userCredentials HashMap. If there is a match, the servlet sends a response indicating success. If there is no match, the servlet sends a response indicating failure.





@WebServlet("/login")
public class LoginServlet extends HttpServlet {
  
  private static final String USERNAME = "admin";
  private static final String PASSWORD = "password";
  
  @Override
  protected void doPost(HttpServletRequest request, HttpServletResponse response)
      throws ServletException, IOException {
    
    String username = request.getParameter("username");
    String password = request.getParameter("password");
    
    if (username.equals(USERNAME) && password.equals(PASSWORD)) {
      request.setAttribute("message", "Name/Password Match");
      RequestDispatcher dispatcher = request.getRequestDispatcher("/welcome");
      dispatcher.forward(request, response);
    } else {
      response.sendRedirect("/error.html");
    }
  }
}

@WebServlet("/welcome")
public class WelcomeServlet extends HttpServlet {
  
  @Override
  protected void doGet(HttpServletRequest request, HttpServletResponse response)
      throws ServletException, IOException {
    
    String username = request.getParameter("username");
    String password = request.getParameter("password");
    String message = (String) request.getAttribute("message");
    
    response.setContentType("text/html");
    PrintWriter out = response.getWriter();
    out.println("<html><body>");
    out.println("<h2>Welcome " + username + "</h2>");
    out.println("<p>Password: " + password + "</p>");
    out.println("<p>Message: " + message + "</p>");
    out.println("</body></html>");
  }
}



@WebServlet("/login")

public class LoginServlet extends HttpServlet {

  

  private static final String USERNAME = "admin";

  private static final String PASSWORD = "password";

  

  @Override

  protected void doPost(HttpServletRequest request, HttpServletResponse response)

      throws ServletException, IOException {

    

    String username = request.getParameter("username");

    String password = request.getParameter("password");

    

    if (username.equals(USERNAME) && password.equals(PASSWORD)) {

      request.setAttribute("message", "Name/Password Match");

      RequestDispatcher dispatcher = request.getRequestDispatcher("/welcome");

      dispatcher.forward(request, response);

    } else {

      response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "Incorrect username or password");

    }

  }

}




@WebServlet("/redirect")
public class RedirectServlet extends HttpServlet {
  
  private static final String BANK_URL = "https://bank.example.com/payment";
  
  @Override
  protected void doGet(HttpServletRequest request, HttpServletResponse response)
      throws ServletException, IOException {
    
    // Set the response content type to HTML
    response.setContentType("text/html");
    
    // Get the explanation message from the query parameter
    String message = request.getParameter("message");
    if (message == null || message.isEmpty()) {
      message = "You are being redirected to the bank website for payment.";
    }
    
    // Write the explanation message to the response
    PrintWriter out = response.getWriter();
    out.println("<html><body>");
    out.println("<h2>" + message + "</h2>");
    out.println("</body></html>");
    
    // Send a redirect response to the bank URL
    response.sendRedirect(BANK_URL);
  }
}




@WebServlet("/config")
public class ConfigServlet extends HttpServlet {
  
  @Override
  protected void doGet(HttpServletRequest request, HttpServletResponse response)
      throws ServletException, IOException {
    
    // Get the servlet config object
    ServletConfig config = getServletConfig();
    
    // Get the values of the init parameters from the servlet config
    String message = config.getInitParameter("message");
    String author = config.getInitParameter("author");
    
    // Write the init parameter values to the response
    PrintWriter out = response.getWriter();
    out.println("<html><body>");
    out.println("<h2>Servlet Config Parameters</h2>");
    out.println("<p>Message: " + message + "</p>");
    out.println("<p>Author: " + author + "</p>");
    out.println("</body></html>");
  }
}






@WebServlet("/context")
public class ContextServlet extends HttpServlet {
  
  @Override
  protected void doGet(HttpServletRequest request, HttpServletResponse response)
      throws ServletException, IOException {
    
    // Get the servlet context object
    ServletContext context = getServletContext();
    
    // Get the values of the context parameters from the servlet context
    String company = context.getInitParameter("company");
    String location = context.getInitParameter("location");
    
    // Write the context parameter values to the response
    PrintWriter out = response.getWriter();
    out.println("<html><body>");
    out.println("<h2>Servlet Context Parameters</h2>");
    out.println("<p>Company: " + company + "</p>");
    out.println("<p>Location: " + location + "</p>");
    out.println("</body></html>");
  }
}



<web-app>
  ...
  <error-page>
    <error-code>404</error-code>
    <location>/underconstruction.html</location>
  </error-page>
</web-app>




