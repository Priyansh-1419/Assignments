
1. Write an application to print “Hello World” using Servlet API. Do servlet-mapping in 
web.xml and annotation both.
2. In the same application, create a servlet to count the total number of hits.
3. In the same application, create a servlet to identify difference between Servlet instance 
variable and local variable
4. Provide the hyperlink to the servlet in HTML and pass the username in the link. On click 
of that hyperlink Servlet will get the username passed in the link and will greet(Good 
morning/afternoon/evening/night)the user with their name based on time of the day.
5. In the same application create a demo of Servlet life cycle. Check for how many times 
init() and destroy() method have been called and at what time during the application 
execution. Record your finding in terms of comments.
6. Create a Servlet to print the request headers. 
7. Create an HTML form that contains text fields, text area, radio buttons, drop-down list, 
checkboxes, and date. Also, create two different servlets to display the values entered 
by the user using the GET and POST methods.
8. Use user-agent header to identify the browser being used by the user. If it is Chrome, 
allow the page to be displayed printing all request headers, if not, it prints an error 
message stating that the application is best suited for Google Chrome.
9. Create a servlet so that it gets auto refreshed every 5 seconds and print the updated 
time.










1. Write an application to print “Hello World” using Servlet API. Do servlet-mapping in 
web.xml and annotation both.

To create a Servlet application that prints "Hello World," you can follow these steps:

Create a new Dynamic Web Project in Eclipse or your preferred IDE.
Add the Servlet API dependency to your project. If you are using Maven, you can add the following dependency to your pom.xml file:
xml
Copy code
<dependency>
   <groupId>javax.servlet</groupId>
   <artifactId>javax.servlet-api</artifactId>
   <version>4.0.1</version>
   <scope>provided</scope>
</dependency>
Create a new Servlet class by right-clicking on your project and selecting New > Servlet. Name your servlet "HelloWorldServlet" and make sure it is in a package, e.g. "com.example.servlets".
Implement the doGet() method in your servlet, which will output "Hello World" to the response:
java
Copy code
import java.io.IOException;
import javax.servlet.http.*;

public class HelloWorldServlet extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
        response.setContentType("text/html");
        response.getWriter().println("<h1>Hello World</h1>");
    }
}
Configure your servlet in the web.xml file by adding the following code:
xml
Copy code
<servlet>
    <servlet-name>HelloWorldServlet</servlet-name>
    <servlet-class>com.example.servlets.HelloWorldServlet</servlet-class>
</servlet>
<servlet-mapping>
    <servlet-name>HelloWorldServlet</servlet-name>
    <url-pattern>/hello</url-pattern>
</servlet-mapping>
Alternatively, you can use annotations to map your servlet. In your servlet class, add the following annotation:
java
Copy code
@WebServlet("/hello")
public class HelloWorldServlet extends HttpServlet {
    // ...
}
Run your application on a web server, and navigate to http://localhost:8080/yourapp/hello to see "Hello World" printed to the screen.



Priyansh Rao
2. In the same application, create a servlet to count the total number of hits.

To create a servlet that counts the total number of hits, you can follow these steps:

Create a new Servlet class by right-clicking on your project and selecting New > Servlet. Name your servlet "HitCounterServlet" and make sure it is in a package, e.g. "com.example.servlets".
Implement the doGet() method in your servlet, which will increment a hit counter and output the total number of hits to the response:
java
Copy code
import java.io.IOException;
import javax.servlet.ServletContext;
import javax.servlet.http.*;

public class HitCounterServlet extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
        ServletContext context = getServletContext();
        Integer hitCounter = (Integer) context.getAttribute("hitCounter");
        if (hitCounter == null) {
            hitCounter = 0;
        }
        hitCounter++;
        context.setAttribute("hitCounter", hitCounter);
        response.setContentType("text/html");
        response.getWriter().println("<h1>Total hits: " + hitCounter + "</h1>");
    }
}
Configure your servlet in the web.xml file by adding the following code:
xml
Copy code
<servlet>
    <servlet-name>HitCounterServlet</servlet-name>
    <servlet-class>com.example.servlets.HitCounterServlet</servlet-class>
</servlet>
<servlet-mapping>
    <servlet-name>HitCounterServlet</servlet-name>
    <url-pattern>/hitcount</url-pattern>
</servlet-mapping>
Alternatively, you can use annotations to map your servlet. In your servlet class, add the following annotation:
java
Copy code
@WebServlet("/hitcount")
public class HitCounterServlet extends HttpServlet {
    // ...
}
Run your application on a web server, and navigate to http://localhost:8080/yourapp/hitcount to see the total number of hits incremented each time you refresh the page. The hit counter will be stored in the ServletContext, which is shared among all servlets in your web application.



Priyansh Rao
3. In the same application, create a servlet to identify difference between Servlet instance 
variable and local variable

In Java, instance variables are variables that belong to an object, while local variables are variables that are declared within a method or block of code. In the context of a Servlet, instance variables belong to the Servlet class, while local variables are declared within the doGet() or doPost() method.

To create a Servlet that demonstrates the difference between instance variables and local variables, you can follow these steps:

Create a new Servlet class by right-clicking on your project and selecting New > Servlet. Name your servlet "VariableDemoServlet" and make sure it is in a package, e.g. "com.example.servlets".
Declare an instance variable in your servlet class:
java
Copy code
import java.io.IOException;
import javax.servlet.http.*;

public class VariableDemoServlet extends HttpServlet {
    private int instanceVariable = 0;

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
        int localVariable = 0;
        instanceVariable++;
        localVariable++;
        response.setContentType("text/html");
        response.getWriter().println("<h1>Instance variable value: " + instanceVariable + "</h1>");
        response.getWriter().println("<h1>Local variable value: " + localVariable + "</h1>");
    }
}
In the doGet() method, declare a local variable and increment both the instance variable and the local variable. Output the values of both variables to the response.
Configure your servlet in the web.xml file by adding the following code:
xml
Copy code
<servlet>
    <servlet-name>VariableDemoServlet</servlet-name>
    <servlet-class>com.example.servlets.VariableDemoServlet</servlet-class>
</servlet>
<servlet-mapping>
    <servlet-name>VariableDemoServlet</servlet-name>
    <url-pattern>/variabledemo</url-pattern>
</servlet-mapping>
Alternatively, you can use annotations to map your servlet. In your servlet class, add the following annotation:
java
Copy code
@WebServlet("/variabledemo")
public class VariableDemoServlet extends HttpServlet {
    // ...
}
Run your application on a web server, and navigate to http://localhost:8080/yourapp/variabledemo to see the difference between instance variables and local variables. The instance variable will be incremented each time you refresh the page, while the local variable will always be set to 1. This is because the local variable is declared within the doGet() method and is recreated each time the method is called, while the instance variable belongs to the Servlet class and persists between requests.





import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class RequestHeadersServlet extends HttpServlet {

    public void doGet(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException {
        
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();

        out.println("<html>");
        out.println("<head>");
        out.println("<title>Request Headers Servlet</title>");
        out.println("</head>");
        out.println("<body>");
        out.println("<h1>Request Headers</h1>");

        // get all header names
        java.util.Enumeration headerNames = request.getHeaderNames();
        while(headerNames.hasMoreElements()) {
            String headerName = (String)headerNames.nextElement();
            out.println("<p>" + headerName + ": " + request.getHeader(headerName) + "</p>");
        }

        out.println("</body>");
        out.println("</html>");
    }
}




import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class GreetingServlet extends HttpServlet {
    public void doGet(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException {
        
        // Read the username parameter from the request
        String username = request.getParameter("username");
        
        // Determine the time of the day
        int hour = new java.util.Date().getHours();
        String timeOfDay;
        if (hour >= 6 && hour < 12) {
            timeOfDay = "morning";
        } else if (hour >= 12 && hour < 18) {
            timeOfDay = "afternoon";
        } else if (hour >= 18 && hour < 21) {
            timeOfDay = "evening";
        } else {
            timeOfDay = "night";
        }
        
        // Generate the greeting message
        String greeting = "Good " + timeOfDay + ", " + username + "!";
        
        // Set the response content type
        response.setContentType("text/html");
        
        // Write the greeting message to the response
        PrintWriter out = response.getWriter();
        out.println("<html>");
        out.println("<head><title>Greeting Servlet</title></head>");
        out.println("<body>");
        out.println("<h1>" + greeting + "</h1>");
        out.println("</body>");
        out.println("</html>");
    }
}



<a href="GreetingServlet?username=John">Click here to be greeted!</a>






