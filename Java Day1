
1.	Write a program called CheckPassFail which prints "PASS" if the int variable "mark" is more than or equal to 50; or prints "FAIL" otherwise. The program shall always print “DONE” before exiting.

package Assignment1;
import java.util.Scanner;
public class Ques1 {
    public String CheckPassFail(int mark){
        if(mark>=50) {
            return "PASS";
        }
        else {
            return "FAIL";
        }
    }
    public static void main(String[] args) {
        Scanner obj = new Scanner(System.in);
        int mark= obj.nextInt();
        Ques1 ch=new Ques1();
        System.out.println(ch.CheckPassFail(mark));
        System.out.println("DONE");
    }
}


2.	Write a program called PrintDayInWord which prints “Sunday”, “Monday”, ... “Saturday” if the int variable "dayNumber" is 0, 1, ..., 6, respectively.  Otherwise, it shall print "Not a valid day". Use 
a.	"nested-if" statement.
b.	"switch-case-default" statement
Try dayNumber = 0, 1, 2, 3, 4, 5, 6, 7 and verify your results

package Assignment1;
import java.util.Scanner;
public class Ques2 {
    //  A)
    public void PrintDayInWord(int day){
        switch (day) {
            case 0:
                System.out.println("Sunday");
                break;
            case 1:
                System.out.println("Monday");
                break;
            case 2:
                System.out.println("Tuesday");
                break;
            case 3:
                System.out.println("Wednesday");
                break;
            case 4:
                System.out.println("Thursday");
                break;
            case 5:
                System.out.println("Friday");
                break;
            case 6:
                System.out.println("Saturday");
                break;
            default:
                System.out.println("Not a valid day");
        }
    }
    //  B)
    public void PrintDay(int day){
        if (day == 0) {
            System.out.println("Sunday");
        }
        else if (day == 1) {
            System.out.println("Monday");
        }
        else if (day == 2) {
            System.out.println("Tuesday");
        }
        else if (day == 3) {
            System.out.println("Wednesday");
        }
        else if (day == 4) {
            System.out.println("Thursday");
        }
        else if (day == 5) {
            System.out.println("Friday");
        }
        else if(day==6)
            System.out.println("Saturday");
        else
            System.out.println("Not a valid day");
    }

    public static void main(String[] args) {
        Scanner input =new Scanner(System.in);
        int dayNo= input.nextInt();
        Ques2 obj=new Ques2();
        obj.PrintDay(dayNo);
        obj.PrintDayInWord(dayNo);
    }
}


3.	The progressive income tax rate is mandated as follows:
Taxable Income	Rate (%)
First $20,000	0
Next $20,000	10
Next $20,000	20
The remaining	30

For example, suppose that the taxable income is $85000, the income tax payable is $20000*0% + $20000*10% + $20000*20% + $25000*30%.

Write a program called IncomeTaxCalculator that reads the taxable income (in int). The program shall calculate the income tax payable (in double); and print the result rounded to 2 decimal places. For examples,
a.	Enter the taxable income: $41234
The income tax payable is: $2246.80

b.	Enter the taxable income: $67891
The income tax payable is: $8367.30

c.	Enter the taxable income: $85432
The income tax payable is: $13629.60

d.	Enter the taxable income: $12345
The income tax payable is: $0.00

package Assignment1;

import java.text.DecimalFormat;
import java.util.Scanner;

public class Ques3 {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        DecimalFormat df = new DecimalFormat("0.00");

        System.out.print("Enter the taxable income: $");
        int taxableIncome = scan.nextInt();

        double taxPayable = 0;

        if (taxableIncome <= 20000) {
            taxPayable = 0;
        } else if (taxableIncome <= 40000) {
            taxPayable = (taxableIncome - 20000) * 0.1;
        } else if (taxableIncome <= 60000) {
            taxPayable = 20000 * 0.1 + (taxableIncome - 40000) * 0.2;
        } else {
            taxPayable = 20000 * 0.1 + 20000 * 0.2 + (taxableIncome - 60000) * 0.3;
        }

        System.out.println("The income tax payable is: $" + df.format(taxPayable));
    }
}


4.	Write a program in Java to check whether an input number is even, odd-non-prime or odd-Prime 

package Assignment1;
import java.util.Scanner;
public class Ques4 {
        public static void main(String[] args) {
            Scanner scan = new Scanner(System.in);
            System.out.print("Enter a number: ");
            int num = scan.nextInt();

            if (num % 2 == 0) {
                System.out.println("The number is even");
            } else if (isPrime(num)) {
                System.out.println("The number is odd-prime");
            } else {
                System.out.println("The number is odd-non-prime");
            }
        }

        private static boolean isPrime(int num) {
            if (num <= 1) {
                return false;
            }

            for (int i = 2; i < num; i++) {
                if (num % i == 0) {
                    return false;
                }
            }

            return true;
        }
}


5.	Write a program  in Java to print the Pascal triangle up to nth level; n being an input from the user : Use multidimensional array only 



 


package Assignment1;

public class Ques5 {
        public static void PascalDiamond(int n) {
            int row = n;
            int col = n * 2;
            int arr[][] = new int[row][col];
            int i, j;


            arr[0][n - 1] = 1;
            for (i = 1; i < arr.length; i++) {
                for (j = 1; j < arr[0].length - 1; j++) {
                    if (i == arr.length - 1 && j == 1)
                        arr[i][0] = 1;
                    else
                        arr[i][j] = arr[i - 1][j - 1] + arr[i - 1][j + 1];

                }
            }
            for (i = 0; i < arr.length; i++) {
                for (j = 0; j < arr[0].length; j++) {
                    System.out.print(arr[i][j] == 0 ? "  " : arr[i][j] + " ");
                }
                System.out.println();
            }
        }

    public static void main(String[] args) {
        PascalDiamond(5);
    }
}

6.	Shyam wants to apply for Home Loan with ABC Bank. The bank has to calculate DBR (Debt to Burden ratio) to find out whether Loan can be approved or not. The formula to calculate DBR is as below: 

DBR = expenses / monthly income 

Wherein:  
Expenses -  sum of all the expenses like rent, credit card payment, existing car loan EMI, existing student loan EMI, any other existing loan EMI 

Monthly income - total of all the combined sources of income like salary or any rent  income or any other income coming from interest paid on the saving amount. 

The loan can be approved if the DBR is 20% or less. If DBR is more than 40%, the loan  application is rejected. 

Create a java program to calculate the DBR and specify whether loan should be approved or rejected. 

		package Assignment1;

import java.util.Scanner;

public class Ques6 {
    public static void calculateDBR(double expenses, double monthlyIncome) {
        double DBR = (expenses / monthlyIncome);
        System.out.println("DBR: " + DBR);
        if (DBR <= 0.2) {
            System.out.println("Loan Approved");
        } else if (DBR > 0.4) {
            System.out.println("Loan Rejected");
        } else {
            System.out.println("DBR is between 20% and 40%. Further evaluation needed.");
        }
    }

    public static void main(String[] args) {
        Scanner myobj = new Scanner(System.in);
        System.out.println("Enter the expense: ");
        double expenses = myobj.nextDouble();
        System.out.println("Enter the Monthly Income: ");
        double monthlyIncome = myobj.nextDouble();
        Ques6 q1 = new Ques6();
        q1.calculateDBR(expenses, monthlyIncome);

    }
}


7.	Shyam has applied for a Home Loan with ABC Bank. The bank has to calculate LTV. LTV is Loan to Value ratio which describes the size of a loan compared to the value of the property securing the loan. The bank policy is that LTV can be maximum 80%. 

The formula to calculate LTV is:
LTV = Loan amount asked / property value 

Write a Java program to calculate the LTV. 

package Assignment1;

import java.util.Scanner;

public class Ques7 {
    public static void calculateLTV(double loanAmount, double valueOfProperty){
        double LTV=(loanAmount/valueOfProperty);

        System.out.println(LTV);    // PRINTING LTV

        //CHECKING LOAN APPROVED OR NOT
        if(LTV <= 0.8){
            System.out.println("Loan Approved");
        }
        else{
            System.out.println("Loan Rejected");
        }
    }

    public static void main(String[] args) {
        Scanner myobj =new Scanner (System.in);

        System.out.println("Loan Amount: ");
        int loanAmt= myobj.nextInt();
        System.out.println("Property Value: ");
        int proValue= myobj.nextInt();

        Ques7 q1=new Ques7();
        q1.calculateLTV(loanAmt, proValue);

    }
}

8.	Before a Loan can be processed by a Bank, the Bank must find out the Maximum Loan Amount which can be given to a particular applicant. The formula to calculate the Maximum Eligible Loan Amount is as below: 

Max_eligible_Loan_amount = E * (( 1 + R) ^t) -1 )/ (R * (( 1 + R) ^t) 

Where:
E = Max eligible EMI (50% of effective monthly salary after deducting 20% DBR) 
R = effective Monthly Rate 
T = tenure (Max tenure which can be considered is 7 years) 

Create a java program to calculate Max Eligible Loan Amount for an applicant. 

package Assignment1;
import java.util.*;
class maxEMI{
    private double maximumEMI;
    private double DBR;
    public double getDbr(double expense, double monthlyIncome) {
        this.DBR = expense/monthlyIncome;
        return 0.2 * DBR;
    }
    public double getMaximumEMI() {
        return maximumEMI;
    }
    public void setMaximumEMI(double rate, double monthlySalary, double tenure,
                              double expense) {
        double numerator = Math.pow(1 + rate, tenure);
        numerator -= 1;
        double denominator = Math.pow(1+rate, tenure);
        denominator = denominator * rate;
        this.maximumEMI = (numerator/denominator) * ((monthlySalary -
                getDbr(expense ,monthlySalary)) * 0.5);
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter your monthly expense : ");
        double expense = sc.nextDouble();
        System.out.print("Enter the monthly rate : ");
        double rate = sc.nextDouble();
        System.out.print("Enter your monthly salary : ");
        double monthlySalary = sc.nextDouble();
        System.out.println("Enter the tenure in years : ");
        double tenure = sc.nextDouble();
        maxEMI obj = new maxEMI();
        obj.setMaximumEMI(rate, monthlySalary, tenure, expense);
        System.out.println("Maximum EMI is : " + String.format("%.2f",
                obj.getMaximumEMI()));
    }
}

9.	Calculate the installment amount of a loan given the following terms of loan:
•	Loan Amount 
•	Rate of Interest 
•	Tenure 
•	Number of installments in a year 

Formula for calculating installment amount is as below: 

  

Where 
X = installment amount 
P = original Loan Principal Amount 
I = interest rate pa 
T = Number of payments in a year 
N = tenure or number of installments 
RV = Residual Value of a loan at the end of tenure 

package Assignment1;
import java.util.*;
class calcInstallmentAmt{
    private double p;
    public double getP() {
        return p;
    }
    public void setIa(double P, double I, double T, double N, double RV) {
        double numerator = RV * (I/T);
        numerator = numerator/(Math.pow(1+(I/T), N));
        numerator = (P*(I/T)) - numerator;
        double denominator = 1/(Math.pow(1+(I/T),N));
        denominator = 1 - denominator;
        this.p = numerator/denominator;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the original principal amount : ");
        double P = sc.nextDouble();
        System.out.print("Interest Rate Per year : ");
        double I = sc.nextDouble();
        System.out.print("Enter the number of payments per year : ");
        double T = sc.nextDouble();
        System.out.print("Number of Installments : ");
        double N = sc.nextDouble();
        System.out.print("Enter the residual value of the loan : ");
        double RV = sc.nextDouble();
        sc.close();
        calcInstallmentAmt obj = new calcInstallmentAmt();
        obj.setIa(P, I, T, N, RV);
        double X = obj.getP();
        System.out.print("The Installment Amount is : " + String.format("%.2f",
                X));
    }
}

10.Generate the Repayment Schedule for the entire Loan period i.e. calculate the return Principal and interest component of each installment given the same parameters as in Question 4. The Java code will return a complete repayment schedule i.e. the following information for the entire period in question (one for each month/installment): 
Installment Number 
Opening Balance 
Interest component 
Principal component 
Installment 
** The above will be repeated for the number of installments 

Formula for creating Principal and Interest Component of an installment is as below (monthly installment is assumed). Installment is calculated in Question 4, use the same formula.

o	In = OPn * (r /100) * (1/12) 
o	Pn = Installment – In 
o	OPn+1 = OPn – Pn 

Where:  
In : Interest component of the nth Installment 
OPn : Outstanding Principal at the beginning of the nth Installment period 
r : Interest rate per annum 
Pn : Principal component of the nth installment 
OPn+1 : Outstanding Principal at the end of the nth Installment period 

package Assignment1;

import java.util.*;
class repaymentSchedule{
    private double interest;
    private double principle;
    private double outstandingPrincipal;
    public double getOutstandingPrincipal() {
        return outstandingPrincipal;
    }
    public void setOutstandingPrincipal(double opn){
        double temp = getPrinciple();
        this.outstandingPrincipal = opn - temp;
    }
    public double getPrinciple() {
        return principle;
    }
    public void setPn(double inRate) {
        double amount = getInterest();
        this.principle = inRate - amount;
    }
    public double getInterest() {
        return interest;
    }
    public void setIn(double opn, double rate) {
        this.interest = (opn * rate)/1200;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter Outstanding Principal at the beginning of the nth Installment period : ");
        double opn = sc.nextDouble();
        System.out.print("Enter the interest rate per annum : ");
        double rate = sc.nextDouble();
        System.out.print("Enter the installment amount : ");
        double inRate = sc.nextDouble();
        sc.close();
        repaymentSchedule obj = new repaymentSchedule();
        obj.setIn(opn, rate);
        obj.setPn(inRate);
        obj.setOutstandingPrincipal(opn);
        System.out.println("Interest Compound : " + obj.getInterest());
        System.out.println("Principle Component : " + obj.getPrinciple());
        System.out.println("Outstanding Component : " +
                obj.getOutstandingPrincipal());
    }
}



